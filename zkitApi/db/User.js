exports.regInfoSchema = {
  name: "RegistrationInfo",
  properties: {
    /**
     * Registration session id received from the tenant server at initiate-user-registration
     * It's used during client side registartion
     */
    sessionId: { type: "string" },
    /**
     * Registration session verifier received from the tenant server at initiate-user-registration
     * It's used during validation, should never be returned to the client
     */
    sessionVerifier: { type: "string" },
    /**
     * Validation verifier received from the client sdk
     * It's used during validation, should never be returned to the client.
     */
    validationVerifier: { type: "string", optional: true },
    /**
     * A validation code generated by our code. Using this the app can implement an out of band validation process.
     * It's used to initiate validation, should be sent to the client on a different channel or used by an administratior
     * to activate the user after the registration was validated. It's intended to be included in a link that
     * is sent to the user in an email.
     */
    validationCode: { type: "string", optional: true }
  }
};

exports.schema = {
  name: "User",
  primaryKey: "zkitId",
  properties: {
    /**
     * The userName that can be used when logging in.
     */
    userName: { type: "string" },
    /**
     * The id of the user in the zerokit sdk. We use this internally too, because it's unique and we have to store it anyway.
     */
    zkitId: { type: "string", indexed: true },
    /**
     * Data used during the registration-validation process
     */
    registrationData: { type: "RegistrationInfo", optional: true },
    /**
     * The state of the user
     * 0: Initiated registration
     * 1: Finished registration
     * 2: validated
     */
    state: { type: "int" },
    /**
     * Arbitrary profile data that can be accessed by the user.
     */
    profileData: { type: "string", default: "" },
    /**
     * Arbitrary public profile data that can be accessed by any logged in user.
     */
    publicProfileData: { type: "string", default: "" }
  }
};
